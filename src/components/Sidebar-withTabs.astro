---
import type { Props } from "@astrojs/starlight/props";
import Default from "@astrojs/starlight/components/Sidebar.astro";
import { Image } from "astro:assets";

const { sidebar } = Astro.props;
---

<div class="sl-sidebar-nav">
    <div class="nav-tabs">
        <button class="tab-button active" data-tab="Begin">
            <span class="icon">
                <img src="/Icons/Icon_Rocket_Blue.svg" alt="开始图标"/>
            </span>
            <span>写在前面</span>
        </button>
        <button class="tab-button" data-tab="Baoyan">
            <span class="icon">
                <img src="/Icons/Icon_Book_Gray.svg" alt="保研图标"/>
            </span>
            <span>保研</span>
        </button>
        <button class="tab-button" data-tab="Kaoyan">
            <span class="icon">
                <img src="/Icons/Icon_Hat_Gray.svg" alt="考研图标"/>
            </span>
            <span>考研</span>
        </button>
        <button class="tab-button" data-tab="Kaogong">
            <span class="icon">
                <img src="/Icons/Icon_People_Gray.svg" alt="考公图标"/>
            </span>
            <span>考公</span>
        </button>
        <button class="tab-button" data-tab="Chuguo">
            <span class="icon">
                <img src="/Icons/Icon_Plane_Gray.svg" alt="出国图标"/>
            </span>
            <span>出国</span>
        </button>
        <button class="tab-button" data-tab="Jiuye">
            <span class="icon">
                <img src="/Icons/Icon_Work_Gray.svg" alt="就业图标"/>
            </span>
            <span>就业</span>
        </button>
    </div>
    <Default {...Astro.props} />
</div>

<style>
    .nav-tabs {
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
        padding: 0.3rem;
        border-bottom: 1px solid var(--sl-color-gray-5);
        border: 1.5px solid var(--sl-color-gray-5);
        border-radius: 0.75rem;
        background-color: black;
        margin-bottom: 1.5rem;
    }

    .tab-button {
        width: 100%;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.5rem;
        background: none;
        color: var(--sl-color-gray-2);
        cursor: pointer;
        text-align: left;
        transition: all 0.2s;
        font-weight: bold;
        font-size: 1rem;
        transition: border 0.2s;
        display: flex;
        gap: 0.7rem;
    }

    .icon {
        display: flex;
        align-items: center;
    }

    .tab-button:hover {
        background: #23262f;
        color: var(--sl-color-white);
    }

    .tab-button.active {
        background: #23262f;
        color: #BED3FF;
        font-weight: bold;
        outline: 1.5px solid var(--sl-color-gray-5);
    }

    :global(.sl-sidebar-nav [aria-current]),
    :global(.sl-sidebar-nav [aria-current]:hover) {
        background: #B3C7FF !important;
        color: black !important;  
        font-weight: bold !important;
    }

    :global(.sl-sidebar-nav a:hover) {
        background-color: var(--sl-color-gray-6);
        color: var(--sl-color-white);
    }

</style>

<script>
    type TabType = "Begin" | "Baoyan" | "Kaoyan" | "Kaogong" | "Chuguo" | "Jiuye";

    const tabButtons = document.querySelectorAll(".tab-button");

    /*
        Begin: 写在前面，FAQ，贡献指南
        beginItems: 直接打上id的元素
        begin_sonItems: 有子目录，不能直接给要隐藏的打id，只能给son打
        begin_liAncestor: 通过son往上找2级li就是要隐藏的元素
    */
    var beginItems, begin_sonItems, begin_liAncestor, Begin_group;
    var baoyanItems, baoyan_sonItems, baoyan_liAncestor, Baoyan_group;
    var kaoyanItems, kaoyan_sonItems, kaoyan_liAncestor, Kaoyan_group;

    initSidebar();
    
    // 初始显示Begin内容
    updateSidebar("Begin");
    
    // 监听 URL 变化
    window.addEventListener('popstate', initTabFromURL);
    
    document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const link = target.closest('a');
        
        // 只处理侧边栏内的链接点击
        if (link && link.closest('.sl-sidebar-nav')) {
            e.preventDefault();
            const href = link.getAttribute('href');
            
            if (href) {
                // 更新 URL，但不刷新页面
                window.history.pushState({}, '', href);

                document.querySelectorAll('.sl-sidebar-nav a').forEach(a => {
                    if (a.getAttribute('href') === href) {
                        a.setAttribute('aria-current', 'page');
                    } else {
                        a.removeAttribute('aria-current');
                    }
                });
                
                // 获取新页面内容
                fetch(href)
                    .then(response => response.text())
                    .then(html => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');
                        
                        // 找到右侧内容区域
                        const newContent = doc.querySelector('.lg\\:sl-flex.astro-67yu43on');
                        const currentContent = document.querySelector('.lg\\:sl-flex.astro-67yu43on') as HTMLElement;
                        
                        if (newContent && currentContent) {
                            // 添加过渡效果
                            currentContent.style.opacity = '0';
                            
                            setTimeout(() => {
                                currentContent.innerHTML = newContent.innerHTML;
                                currentContent.style.opacity = '1';
                                
                                // 更新页面标题
                                const newTitle = doc.querySelector('title');
                                if (newTitle) {
                                    document.title = newTitle.textContent || '';
                                }
                                
                                // 更新侧边栏状态
                                initTabFromURL();
                            }, 300);
                        }
                    })
                    .catch(error => {
                        console.error('加载页面内容失败:', error);
                    });
            }
        }
    });

    // ---------------------------------------functions below---------------------------------------

    function initSidebar() {
        [
            "/Icons/Icon_Rocket_Gray.svg",
            "/Icons/Icon_Rocket_White.svg",
            "/Icons/Icon_Rocket_Blue.svg",
            "/Icons/Icon_Book_Gray.svg",
            "/Icons/Icon_Book_White.svg",
            "/Icons/Icon_Book_Blue.svg",
            "/Icons/Icon_Hat_Gray.svg",
            "/Icons/Icon_Hat_White.svg",
            "/Icons/Icon_Hat_Blue.svg",
            "/Icons/Icon_People_Gray.svg",
            "/Icons/Icon_People_White.svg",
            "/Icons/Icon_People_Blue.svg",
            "/Icons/Icon_Plane_Gray.svg",
            "/Icons/Icon_Plane_White.svg",
            "/Icons/Icon_Plane_Blue.svg",
            "/Icons/Icon_Work_Gray.svg",
            "/Icons/Icon_Work_White.svg",
            "/Icons/Icon_Work_Blue.svg"
        ].forEach(src => {
            const img = new window.Image();
            img.src = src;
        });

        // 页面加载时初始化
        document.addEventListener('DOMContentLoaded', initTabFromURL);

        beginItems = document.querySelectorAll('[id="sidebar_begin"]');
        begin_sonItems = document.querySelectorAll('[id="sidebar_begin_son"]');
        begin_liAncestor = begin_sonItems[0]?.closest('li')?.parentElement?.closest('li');

        Begin_group = [];
        Begin_group.push(begin_liAncestor);
        beginItems.forEach((item) => {
            const liAncestor = item.parentElement;
            Begin_group.push(liAncestor);
        });

        baoyan_sonItems = document.querySelectorAll('[id="sidebar_baoyan_son"]');
        baoyan_liAncestor = baoyan_sonItems[0]?.closest('li')?.parentElement?.closest('li');
        Baoyan_group = [];
        Baoyan_group.push(baoyan_liAncestor);

        kaoyan_sonItems = document.querySelectorAll('[id="sidebar_kaoyan_son"]');
        kaoyan_liAncestor = kaoyan_sonItems[0]?.closest('li')?.parentElement?.closest('li')?.parentElement?.closest('li');
        Kaoyan_group = [];
        Kaoyan_group.push(kaoyan_liAncestor);
    }

    function setGroupDisplay(group: (HTMLLIElement | null | undefined)[], isShow: boolean) {
        if (isShow) {
            group.forEach((item) => {
                (item as HTMLElement).style.display = 'block';
            });
        }
        else {
            group.forEach((item) => {
                (item as HTMLElement).style.display = 'none';
            });
        }
    }

    function updateSidebar(tab: TabType) {
        const beginItems = document.querySelectorAll('[id="sidebar_begin"]');
        const begin_sonItems = document.querySelectorAll('[id="sidebar_begin_son"]');
        const begin_liAncestor = begin_sonItems[0]?.closest('li')?.parentElement?.closest('li');

        const Begin_group = [];
        Begin_group.push(begin_liAncestor);
        beginItems.forEach((item) => {
            const liAncestor = item.parentElement;
            Begin_group.push(liAncestor);
        });

        const baoyan_sonItems = document.querySelectorAll('[id="sidebar_baoyan_son"]');
        const baoyan_liAncestor = baoyan_sonItems[0]?.closest('li')?.parentElement?.closest('li');
        const Baoyan_group = [];
        Baoyan_group.push(baoyan_liAncestor);

        const kaoyan_sonItems = document.querySelectorAll('[id="sidebar_kaoyan_son"]');
        const kaoyan_liAncestor = kaoyan_sonItems[0]?.closest('li')?.parentElement?.closest('li')?.parentElement?.closest('li');
        const Kaoyan_group = [];
        Kaoyan_group.push(kaoyan_liAncestor);

        if (tab == "Begin") {
            setGroupDisplay(Begin_group, true);
            setGroupDisplay(Baoyan_group, false);
            setGroupDisplay(Kaoyan_group, false);
        }
        else if (tab == "Baoyan") {
            setGroupDisplay(Begin_group, false);
            setGroupDisplay(Baoyan_group, true);
            setGroupDisplay(Kaoyan_group, false);
        }
        else if (tab == "Kaoyan") {
            setGroupDisplay(Begin_group, false);
            setGroupDisplay(Baoyan_group, false);
            setGroupDisplay(Kaoyan_group, true);
        }
    }

    tabButtons.forEach((button) => {
        // 鼠标悬停
        button.addEventListener("mouseenter", () => {
            if (!button.classList.contains('active')) {
                const iconImg = button.querySelector('.icon img') as HTMLImageElement;
                if (iconImg && iconImg.src.includes('_Gray.svg')) {
                    iconImg.src = iconImg.src.replace('_Gray.svg', '_White.svg');
                }
            }
        });

        // 鼠标离开
        button.addEventListener("mouseleave", () => {
            if (!button.classList.contains('active')) {
                const iconImg = button.querySelector('.icon img') as HTMLImageElement;
                if (iconImg && iconImg.src.includes('_White.svg')) {
                    iconImg.src = iconImg.src.replace('_White.svg', '_Gray.svg');
                }
            }
        });

        // 鼠标点击
        button.addEventListener("click", () => {
            tabButtons.forEach((btn) => {
                btn.classList.remove("active");
                const btnImg = btn.querySelector('.icon img') as HTMLImageElement;
                if (btnImg) {
                    btnImg.src = btnImg.src
                        .replace('_Blue.svg', '_Gray.svg')
                        .replace('_White.svg', '_Gray.svg');
                }
            });

            button.classList.add("active");
            const iconImg = button.querySelector('.icon img') as HTMLImageElement;
            if (iconImg) {
                iconImg.src = iconImg.src.replace('_Gray.svg', '_Blue.svg');
            }

            const tab = button.getAttribute("data-tab") as TabType;
            if (tab) {
                updateSidebar(tab);
            }
        });
    });

    function initTabFromURL() {
        const path = decodeURIComponent(window.location.pathname);;
        let targetTab: TabType = "Begin";

        if (path.includes('/写在前面') || path.includes('/快问快答') || path.includes('/贡献指南')) {
            targetTab = "Begin";
        } 
        else if (path.includes('/保研')) {
            targetTab = "Baoyan";
        } 
        else if (path.includes('/考研')) {
            targetTab = "Kaoyan";
        } 
        else if (path.includes('/考公')) {
            targetTab = "Kaogong";
        } 
        else if (path.includes('/出国')) {
            targetTab = "Chuguo";
        } 
        else if (path.includes('/就业')) {
            targetTab = "Jiuye";
        }

        // 找到对应的按钮并触发点击
        const targetButton = document.querySelector(`[data-tab="${targetTab}"]`);
        if (targetButton) {
            (targetButton as HTMLButtonElement).click();
        }
    }

</script>
